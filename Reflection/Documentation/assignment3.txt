Assignment 3:

<<<<Testing and Debugging>>>


Names of everyone on the team:

Signe Nilsson
Eidam Holgaard
Seyed Mostafa Mohseni

Link to the project page on the git server:

https://github.com/SigneNilsson/PA1489_BurgerOrderer.git

-Testplan:
As most of the items and concepts of 5.1.1 in the assignment where new to us it was hard to make a plan for the tests. For example, as we were 
to make the plan for testing in the beginning we did not even know what a module was. Even less we knew how to test it! We did not know what an API endpoint
was, we did not know what technologies existed for testing. And even though Mikael had a lecture on debugging and testing, it was hard to make a plan of how to make 
it was so many things we hadn't met before. So we decided to test our code manually continuously and try to manage automated tests in the end. And thats a plan 
we could stick to, even though it's vague.

-Brief summary of which functionality you have tested:
We have continuously made manual test throughout to see, to mention a few examples, if the rendered page is looking as we want and the right 
burgers and options are ordered. Everytime we make a change we check to see the outcome. 

We have used automated tests using pytest to: 

*test if getBurgers() returns 3 burgers. Also made a catch with try/except which is not used in code but documented in Signes engineers journal.
*Test addOptions().

-Brief summary of how you have completed the tests:
As to summarize:
Manual testing has been used with every change in code, to see if what we expect to happen actually happen and as to not continue working 
on code thats not working as planned.

We added some automated tests in the end to test parts of the functionality.

-Printout from your last test session, so you can see:


we created a test file (buydef-test.py)in burger_order and tested the function "def addOptions()".
In the terminal under the file burger_order we runed command, python -m pytest buydef-test.py, and get the following print-out!

the output:

$ python -m pytest buydef-test.py
============================= test session starts =============================
platform win32 -- Python 3.11.9, pytest-8.3.3, pluggy-1.5.0
rootdir: C:\Users\mosta\OneDrive\Dokuments\GitHub\Grupptest\Containers\burger_orderer
collected 1 item

buydef-test.py .                                                         [100%]

============================== 1 passed in 0.01s ==============================


The test successfully passed!


And here is an output from the getBurgers test:
PS C:\Users\local admin\Software_Engineering_2024\PA1489_BurgerOrderer\Containers\burger_orderer> python3 -m pytest test_functions.py
================================================= test session starts =================================================
platform win32 -- Python 3.11.9, pytest-8.3.3, pluggy-1.5.0
rootdir: C:\Users\local admin\Software_Engineering_2024\PA1489_BurgerOrderer\Containers\burger_orderer
collected 1 item

test_functions.py .                                                                                              [100%]

================================================== 1 passed in 0.04s ==================================================

More questions from assignment3:
• How many tests you have written
We have written 2 automated tests. You can see the commands on how to run it in the documentation above.

• What they test:
They test getBurgers() *test if getBurgers() returns 3 burgers.
They test addOptions(). 

• How many tests succeed or fail:
All tests succeed.


-Your experiences about writing automated unit tests.
• What went well?
We did manage to use pytest successfully, even though it only tests a small part of the code.

• What went less well?
As automated tests are new to us, we didn't make any tests that actually test functionality of
a large part of the code, so it's not that useful. It was hard knowing how to use the automated tests in a 
useful way.

• How did you solve the difficulties? Could you have done differently?
As automated tests is yet another new component in our toolbox we think we couldn't have done anything differently on this point
given our starting point.
We had to focus on functionality and all new concepts required to make the app work, before thinking on testing. Although now 
that we know that automated tests exist it seems best to implement them from start.

• What did you not manage to solve? Why not?
We do not test all of the functions. See why in previous answer.


Summary:
We have tested our code continuously during the process and managed to make two tests using pytest that is automatic.
An improvement would be if we could make tests for all the main functionality of the project and include them to run automatically. 

