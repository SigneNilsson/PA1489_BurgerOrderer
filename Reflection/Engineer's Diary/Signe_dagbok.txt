First entry in the diary!
We are a group of three happy people.

In our first meeting together we've made sure all group members have a github account. That alone proved to be a challenge.

With github in place, we've prepared directories for reflections, containers and planning according to the specifics of the assignment.
We've also made directories for the database and server that we will need later.

We've made out first commits and everything seems to be working.

The git commands used are:

git clone - making a clone of the branch.
git commit - commit changes to the branch you´re working in. It's important to describe the commit as it is part of the examination, something we're implementing in the group from start.
git add - add changes
git switch - switch branch
git fetch - updates remote tracking branches
git merge - merge branches
git pull - combines git fetch and git merge to update the local branch with changes
git push - upload local repository content to remote repository.

Our aim is to keep a main branch without faults, alas the maintenance branch! This is where we vill make all changes and make sure everything is working before merging it with the main branch. 
We're also planning on not working in the same file at the same time to avoid conflicts.

The difficulties I've encountered so far is using the git commands in the right way and felling comfortable in the environment we're working with. It's the first time I've used github, but I think I'm
getting the hang of it now. I just need to remember to git pull after git fetch! A mistake I've made, and won't make again.

As we're just in the beginning of the process there are parts of the assignment that I'm not sure how to solve yet. I'm not yet comfortable with using containers and databases so that might prove a challenge.

___
We have set up burger orderer with a little help from the github directory Mikael shared. We've gone through the code trying to figure out what all parts are doing.
We installed podman to make our containers.
Used exercise 8 to understand containers and images and read about containers and images.
___
Today we set up all the files and also a first attempt at the burger orderer.
We Tested burger orderer on localhost, and it worked! We have a simple frontpage showing the available burgers.

___
Today we managed to get the front page of both kitchen view and burger orderer to work. We are showing all available burgers and which ingredients they contain.
We have started with a get form that allows you to click which burger you want to buy. We still have to get the REST API so the connection still isn't working. But you can 
see in the terminal that burger_orderer tries to send to kitchen view.
We have started working on the database.

A problem at the moment is how the alterations of the burgers is supposed to work. How are we going to show the available ingredients and add och remove items? That's something we'll 
have to think about a bit more.

Another problem om mine is that the commits i made yesterday are gone since I forgot to push them. A mistake I won't make again.
___
Database - todays aim is to create the database and the container for it.

Today i've searched a lot of information on how to set up containers. I tested getting an image for a mysql database with the following command: podman pull docker.io/library/mysql:latest and it worked.
Overjoyed with it working I made a script of it. I also made a sql script that creates a database (menuStore) with a table(starting with just one to test it out).

I made lots of tests on how to make the container based on an mysql image working. I've had lots of problems using the syntax and getting the right paths to the files. I've also had problems with the podman cp command.
As far as I understand it's common that it's not working correctly on Windows so I had to use WSL. It was tricky since the ports used don't seem to close when I retry to run the script. Thats why it's currently said to
expose on port 5006. I started out at port 5001 and tried my way up getting errors like "Error: rootlessport listen tcp 0.0.0.0:5001: bind: address already in use." Every time I run the script and something goes wrong(as I said, I've 
had lots of syntax problems trying to get the path right etc.) I have to change port. I tried adding 
podman stop menuStore
podman rm menuStore
at the start of the script trying to stop and remove any existing containers with the same name, but it does not work. At the moment I'm happy just to have a script creating a container with a database that's working. 

Next up is creating tables and data in the database, something I know Eidam has started already. We also need to create containers for the kitchen view and the burger orderer and connect it all. 

I'm a bit stressed because we've not been able to meet all together in the group in a while due to sickness and will have lots to do this week before the assignment is due. 
---

A bit of explanation on yesterdays commit: To start the container you need to go to the db folder and run the script for creating the database using ./create_database.sh, then you need to enter: podman exec -it menuStore /bin/bash to the terminal to
enter the container. The exec command is used to run the process in the container. The problem from yesterday has not magically disappeared over night, everytime I try to create the database I have to change port.

The aim of today is to focus on the documentation and start thinking about documenting some tests. We test our code all the time in for example localhost to see the front page of the burger orderer and how it changes
when we alter the code. At the moment the burger orderer page isn't working as we want to because when we enter submit on our order, the page isn't changing as we want to. Even though the terminal running the kitchen view app
does require information the way we want to when a burger is ordered. At the moment I'm thinking we need to change the burgerorderer to a simpler version to be able to test it as the inputs for adding and removing ingredients
is not working the way we want to. 

I'm also realizing we have no automated tests as we should have. We've been talking about pytest to make some automated test, but at the moment it's hard to know how to use it on our project. We have installed pytest to try it out. I will read about automated tests
today hoping to gain some clarity.
___
Today I started out by creating tables in the menu_store and added ingredients in a way that I think will be easy to retrieve from python. I decided to make a table for all burgers (menu_items) and 
containing only the name of the different burgers. I also created a table with all ingredients (ingredients) and a table with the name of each burger and the ingredients of the burger in a comma separated string.

A problem is how to connect to the database to burgerorderer using python. I found the MySQL Connector module that I think will be useful and added a file with a function connecting to the database. I had to install the
module using pip install mysql-connector-python.
___
Today when I tried running the code in the script create_database.sh I got an error saying something was wrong. It was an error in menuStore.sql. I tried running the script menuStore in mysql to see if it worked and realized that there were no data in my tables. 
All three tables were created but with no data, the INSERT bit had not worked. I looked through the code and realized it was a bunch of semicolons that was missing. As Python is the language I've used the most, I guess that will happen..
I also got an error because I used the wrong datatype when creating a table. I tried to insert a string but it was set to be an integer when the table was created. With that changed, everything is working when it comes to creating the database with actual data in it.

We have been researching testing today and preparing for debugging tomorrow. I've tried the debugger in vscode in the app.py in burger_orderer using breakpoints and step over and step into, but have yet to document it. I also made a first attempt 
at making an automated test using pytest. I made a simple test just to try it out. I tested if length of the burger variable was three(that we have three burgers on the menu) and it, of course(as we have three burgers), passed. It was mostly to try how pytest works. Hopefully we can 
make a more useful test tomorrow.

We still have no actual use for the database in our burger_orderer app, since we're still using a temporary list in the app file. A goal is to retrieve the information of the burgers from the database instead. Something I've never done before. 
When I searched for connecting to mysql database with python I found the mysql connector module. I've tried making the connection with menu_store in the new connect_to_database.py file but It does not work. 
I think it's the port or host that's not right as I don't fully understand which port the connection is referring to. I've tried using different ports but as I have to change port in the create_database.sh script everytime I rerun it
it's been hard to test.
___

When I try running the connect_to_database.sh script, the following error is shown:

Exception has occurred: InterfaceError
2003: Can't connect to MySQL server on 'localhost:3306' (Errno 10061: Det gick inte att göra en anslutning eftersom måldatorn aktivt nekade det)
ConnectionRefusedError: [WinError 10061] Det gick inte att göra en anslutning eftersom måldatorn aktivt nekade det

The above exception was the direct cause of the following exception:

  File "C:\Users\local admin\Software_Engineering_2024\PA1489_BurgerOrderer\Containers\burger_orderer\connecto_to_database.py", line 5, in <module>
    conn = connect(
           ^^^^^^^^
mysql.connector.errors.InterfaceError: 2003: Can't connect to MySQL server on 'localhost:3306' (Errno 10061: Det gick inte att göra en anslutning eftersom måldatorn aktivt nekade det), 


I changed to wsl from windows and it worked. I can't get the container to show up in podman desktop but using podman ps I can see I have a container up and running. Success! Now the problem is that I can't connect 
to it using python. We want to connect to the database in burgerorderer. I got the following error when running connecto_to_database.py:

Traceback (most recent call last):
  File "/mnt/c/Users/local admin/Software_Engineering_2024/PA1489_BurgerOrderer/Containers/burger_orderer/connecto_to_database.py", line 2, in <module>
    from mysql.connector import connect
ModuleNotFoundError: No module named 'mysql'

It seems as I didn't have the mysql module installed. I installed it with pip install and now I can see that the container with the database is up and running and a connection has been created:

podman ps
CONTAINER ID  IMAGE                           COMMAND     CREATED         STATUS             PORTS                   NAMES
1ee69c091d2d  docker.io/library/mysql:latest  mysqld      26 seconds ago  Up 26 seconds ago  0.0.0.0:3308->3306/tcp  menuStore

To run this, I have to stand in the db folder:
python3 connecto_to_database.py
A connection object has been created.

Success! Next step is to test the data using mysql in the terminal. And if I have time then figure out how to read the data in our burger_orderer and use it instead of our current static_burgers.

But first, it's time to make a debug session. I've thought about how to best debug the code since we have a lot of code in app.py. I think we should make a module containing functions used in app.py 
and then debug it in smaller parts, using different inputs to see what happens with our variables.
_____

After speaking with Mikael it seems we are closer to building containers for kitchen view and burger orderer that we expected. We already have the dockerfile and just need to: 
podman-compose -f burger_orderer.yaml build
podman-compose -f burger_orderer.yaml up

using the command podman ps -a shows there are two containers:(menuStore was already running)
but burgerorderer is only created and will not run. 

CONTAINER ID  IMAGE                           COMMAND     CREATED         STATUS          PORTS                   NAMES
1ee69c091d2d  docker.io/library/mysql:latest  mysqld      3 hours ago     Up 3 hours ago  0.0.0.0:3308->3306/tcp  menuStore
6aa68ca71667  localhost/burgerorderer:latest              11 minutes ago  Created         0.0.0.0:8000->8000/tcp  pa1489_burgerorderer_burgerorderer_1

Realized the code starting the database with menuStore that I made earlier will be hard to use as it's not running in the same container as kitchen view and burger orderer. Mikael said it 
would be hard to retrieve information from it as it is now. But at least I got a container working with a database, even if we can't use it..

We updated the yaml file to contain the image of kitchen view, burger orderer and menuStore. We tried setting them up with Mikael and it did not work. As it is, I have no time fixing it and will probably have to 
leave it as it is.

A god thing is I feel comfortable using git now, given the many times I've commited lately.

___
We have running containers for burger_orderer, kitchen_view and menu_store! I finally understand the meaning of the docker-compose file. Earlier when Mikael tried to build the containers, he said I 
should try using docker instead of podman, so I installed it. I read that it is easier buildning the containers if the docker-compose file is actually called docker-compose, as you don't need the -f flag when running it. Earlier it was
named burger_orderer.yaml, so I changed it.

When trying to build the containers menustore started up but kitchen view and burger orderer didn't. The problem was that not all extern modules were included in the requirements.txt file. Another problem was that the container for
adminer was running on the same port as the burger orderer app. But the main thing was probably that the names in the path the kitchenview and burgerorderer in the docker-compose file was wrong. We named out files in this form: burger_orderer
but in the docker-compose file the path referred to burgerorderer without _. After making these changes, and having some trouble restarting it several times because I did not delete the old containers at first, everything was created with docker-compose build,
and now we have all containers running (docker-compose up)!

We also have access to the database using adminer on port 8080 in localhost. Mikael said it was useful when adding data to the database. I don't know if we'll have the time for it. The debuggsession is 
more urgent as the assignment is due tomorrow.

We also have the problem that sometimes you get redirected to an errormessage when buying burgers in menustore. Time will tell what we will manage to solve in time.
___

Documentation of debugsession:

My aim is to debug the app.py in burgerorderer as it is not working properly. I will use the pythondebugger in vscode.

I set my breakpoints at all functions to monitor the flow of the program and maybe figure out whats going wrong when buying a burger. 
I used continue and found out the script runs twice before it rendered the front page. When accessing the burger orderer page on port 8000 it was working as I expected. 

I selected a signeburger on localhost and submitted the form. I got a ConnectionError when trying to buy the burger. It seems as we have no connection to the kitchen view application, and
I don't know how to debug it further when it's the connection thats faulty.I got no variables which is weird. Something must be wrong. Will try again if i can fix the problem, or use another file to debug.
___
I realized the debug didn't work as expected because I was already running the burgerapp in the container, and when I run it in the debugger it did not work as they were trying to 
use the same port. Now I can try to debug and monitor the variables in burgerorderer app.py. As I have not made the code that sends to kitchen view, it will be useful to se the variable names so that 
I can understand it better. We have made several versions of the burger app, and it has worked at some point, but now it's all errors when buying.

So: I set the breakpoints at all functions, so I will be able to step into or step over as I'm curious about the flow. As I run and debug the app I can see the frontpage as the code runs "return renderFrontpage. 
I click on the Signeburger and submit. As the form action is /burgers2 the next breakpoint is in buy2. In buy2 the buy function is called. Now we have the variables burgerName = 'Signeburger' and two empty lists add_ingredients and 
remove_ingredients. As I step into the buy function it prints Placing an order on Signeburger with additions: [] and removals: [] in the terminal as expected. Then the function sendToKitchen is called and as we continue running the code 
it renders the ordering page successfully and I'm now redirected to http://127.0.0.1:8000/burgers2?burgers=Signeburger in the browser and the following message is shown: 
"Ordered Signeburger with added ingredients: and without:"

As you can see the output is not adapting to not having added or removed ingredients. But it works! 
In the terminal where the kitchenview app is running you can see the following: 

Loading front page
127.0.0.1 - - [17/Oct/2024 23:01:23] "GET /?url=http://localhost:5000/buy/Signeburger HTTP/1.1" 200 -
when I follow the link, I see the message.

"One Signeburger ordered with the following options:"

Alas, it is indeed working, but the page in kitchenview on localhost:5000 is not redirected the page with the placed order automatically. I think we need javascript for that,
so we can settle on the easy way of printing the order in the kitchen view terminal instead.

Documentation of debugsession#2:
Mikael told me it is ok to debug part of a script to show that I can use the debugger, so if the last part was not enough I will do another debugsession, although it's really 
not needed for the app.. So I will debug the first part of burger_orderer app.py as to see what happens with the variables, especially static_Burgers and ensure the
burgers are retrieved correctly by the function getBurgers(). 

I start by setting a breakpoint on line 20 where the function getBurgers() is. I use the python debugger in vscode. As to not make any changes in the app itself and still be able to change input to the function getBurgers I chose to put it in a module called app_functions. 
As the code reaches the breakpoint I chose to step into the function getBurgers(). I can see in the variables that I have the variable Static Burgers containing the dictionary of the burgers and their ingredients. 
I create two calls to the function to test it:

Burgers = getBurgers()
wrongBurgers = getBurgers("a")

I'm sure the last one will bring an error, and I can use the error to create a try/except to stop the code from crashing if it was to be called in the wrong way. I step into the first call Burgers = getBurgers()
and get the variable Burgers containing, as I knew, the same as the dictionary StaticBurgers.

I step into the second functioncall wrongBurgers = getBurgers("a") and get a Type Error:

Exception has occurred: TypeError
getBurgers() takes 0 positional arguments but 1 was given
  File "C:\Users\local admin\Software_Engineering_2024\PA1489_BurgerOrderer\Containers\burger_orderer\app_functions.py", line 35, in <module>
    wrongBurgers = getBurgers("a")
                   ^^^^^^^^^^^^^^^
TypeError: getBurgers() takes 0 positional arguments but 1 was given

As the function getBurgers() takes no argument, I figured this would happen. As I know this is a TypeError, I can now catch it with try/except if I want. 

try:
    wrongBurgers = getBurgers("a")
except TypeError
    print("Not allowed")
    

But that wouldn't be necessary as the function is never called with arguments in our code. But would maybe be needed if getBurgers() was used again in another script.

Förbättringsmöjligheter:
-hämta data från databasen
-redirect i kitchenview när order lagts så att den syns
-lägga till/ta bort flera ingredienser.
