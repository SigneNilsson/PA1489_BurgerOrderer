First entry in the diary!
We are a group of three happy people.

In our first meeting together we've made sure all group members have a github account. That alone proved to be a challenge.

With github in place, we've prepared directories for reflections, containers and planning according to the specifics of the assignment.
We've also made directories for the database and server that we will need later.

We've made out first commits and everything seems to be working.

The git commands used are:

git clone - making a clone of the branch.
git commit - commit changes to the branch youÂ´re working in. It's important to describe the commit as it is part of the examination, something we're implementing in the group from start.
git add - add changes
git switch - switch branch
git fetch - updates remote tracking branches
git merge - merge branches
git pull - combines git fetch and git merge to update the local branch with changes
git push - upload local repository content to remote repository.

Our aim is to keep a main branch without faults, alas the maintenance branch! This is where we vill make all changes and make sure everything is working before merging it with the main branch. 
We're also planning on not working in the same file at the same time to avoid conflicts.

The difficulties I've encountered so far is using the git commands in the right way and felling comfortable in the environment we're working with. It's the first time I've used github, but I think I'm
getting the hang of it now. I just need to remember to git pull after git fetch! A mistake I've made, and won't make again.

As we're just in the beginning of the process there are parts of the assignment that I'm not sure how to solve yet. I'm not yet comfortable with using containers and databases so that might prove a challenge.

___
We have set up burger orderer with a little help from the github directory Mikael shared. We've gone through the code trying to figure out what all parts are doing.
We installed podman to make our containers.
Used exercise 8 to understand containers and images and read about containers and images.
___
Today we set up all the files and also a first attempt at the burger orderer.
We Tested burger orderer on localhost, and it worked! We have a simple frontpage showing the available burgers.

___
Today we managed to get the front page of both kitchen view and burger orderer to work. We are showing all available burgers and which ingredients they contain.
We have started with a get form that allows you to click which burger you want to buy. We still have to get the REST API so the connection still isn't working. But you can 
see in the terminal that burger_orderer tries to send to kitchen view.
We have started working on the database.

A problem at the moment is how the alterations of the burgers is supposed to work. How are we going to show the available ingredients and add och remove items? That's something we'll 
have to think about a bit more.

Another problem om mine is that the commits i made yesterday are gone since I forgot to push them. A mistake I won't make again.
___
Database - todays aim is to create the database and the container for it.

Today i've searched a lot of information on how to set up containers. I tested getting an image for a mysql database with the following command: podman pull docker.io/library/mysql:latest and it worked.
Overjoyed with it working I made a script of it. I also made a sql script that creates a database (menuStore) with a table(starting with just one to test it out).

I made lots of tests on how to make the container based on an mysql image working. I've had lots of problems using the syntax and getting the right paths to the files. I've also had problems with the podman cp command.
As far as I understand it's common that it's not working correctly on Windows so I had to use WSL. It was tricky since the ports used don't seem to close when I retry to run the script. Thats why it's currently said to
expose on port 5006. I started out at port 5001 and tried my way up getting errors like "Error: rootlessport listen tcp 0.0.0.0:5001: bind: address already in use." Every time I run the script and something goes wrong(as I said, I've 
had lots of syntax problems trying to get the path right etc.) I have to change port. I tried adding 
podman stop menuStore
podman rm menuStore
at the start of the script trying to stop and remove any existing containers with the same name, but it does not work. At the moment I'm happy just to have a script creating a container with a database that's working. 

Next up is creating tables and data in the database, something I know Eidam has started already. We also need to create containers for the kitchen view and the burger orderer and connect it all. 

I'm a bit stressed because we've not been able to meet all together in the group in a while due to sickness and will have lots to do this week before the assignment is due. 
---

A bit of explanation on yesterdays commit: To start the container you need to go to the db folder and run the script for creating the database using ./create_database.sh, then you need to enter: podman exec -it menuStore /bin/bash to the terminal to
enter the container. The exec command is used to run the process in the container. The problem from yesterday has not magically disappeared over night, everytime I try to create the database I have to change port.

The aim of today is to focus on the documentation and start thinking about documenting some tests. We test our code all the time in for example localhost to see the front page of the burger orderer and how it changes
when we alter the code. At the moment the burger orderer page isn't working as we want to because when we enter submit on our order, the page isn't changing as we want to. Even though the terminal running the kitchen view app
does require information the way we want to when a burger is ordered. At the moment I'm thinking we need to change the burgerorderer to a simpler version to be able to test it as the inputs for adding and removing ingredients
is not working the way we want to. 

I'm also realizing we have no automated tests as we should have. We've been talking about pytest to make some automated test, but at the moment it's hard to know how to use it on our project. We have installed pytest to try it out. I will read about automated tests
today hoping to gain some clarity.
___
Today I started out by creating tables in the menu_store and added ingredients in a way that I think will be easy to retrieve from python. I decided to make a table for all burgers (menu_items) and 
containing only the name of the different burgers. I also created a table with all ingredients (ingredients) and a table with the name of each burger and the ingredients of the burger in a comma separated string.

A problem is how to connect to the database to burgerorderer using python. I found the MySQL Connector module that I think will be useful and added a file with a function connecting to the database. I had to install the
module using pip install mysql-connector-python.
___
Today when I tried running the code in the script create_database.sh I got an error saying something was wrong. It was an error in menuStore.sql. I tried running the script menuStore in mysql to see if it worked and realized that there were no data in my tables. 
All three tables were created but with no data, the INSERT bit had not worked. I looked through the code and realized it was a bunch of semicolons that was missing. As Python is the language I've used the most, I guess that will happen..
I also got an error because I used the wrong datatype when creating a table. I tried to insert a string but it was set to be an integer when the table was created. With that changed, everything is working when it comes to creating the database with actual data in it.

We have been researching testing today and preparing for debugging tomorrow. I've tried the debugger in vscode in the app.py in burger_orderer using breakpoints and step over and step into, but have yet to document it. I also made a first attempt 
at making an automated test using pytest. I made a simple test just to try it out. I tested if length of the burger variable was three(that we have three burgers on the menu) and it, of course(as we have three burgers), passed. It was mostly to try how pytest works. Hopefully we can 
make a more useful test tomorrow.

We still have no actual use for the database in our burger_orderer app, since we're still using a temporary list in the app file. A goal is to retrieve the information of the burgers from the database instead. Something I've never done before. 
When I searched for connecting to mysql database with python I found the mysql connector module. I've tried making the connection with menu_store in the new connect_to_database.py file but It does not work. 
I think it's the port or host that's not right as I don't fully understand which port the connection is referring to. I've tried using different ports but as I have to change port in the create_database.sh script everytime I rerun it
it's been hard to test.